generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ANIME_STATUS {
  ONGOING
  COMPLETED
}

enum USER_ROLE {
  SUPER_ADMIN
  ADMIN
  AUTHOR
  USER
}

model User {
  id             String   @id @default(uuid())
  imageUrl       String   @db.Text
  externalUserId String   @unique
  username       String
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Review     Review[]
  BlogReview BlogReview[]
}

model AdminUser {
  id             String    @id @default(uuid())
  imageUrl       String    @db.Text
  externalUserId String    @unique
  username       String
  email          String    @unique
  role           USER_ROLE @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  Blog Blog[]
}

model Anime {
  id              String       @id @default(uuid())
  title           String
  description     String       @db.Text
  watchLink       String       @db.Text
  status          ANIME_STATUS
  studio          String
  artist          String
  episodes        Int
  episodeDuration Int
  release         DateTime
  genre           String[]
  imageLink       String       @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Review          Review[]
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  imageLink   String   @db.Text
  content     String?  @db.Text
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author     AdminUser    @relation(fields: [authorId], references: [id])
  BlogReview BlogReview[]

  @@index([authorId])
}

model BlogReview {
  id        String   @id @default(uuid())
  review    String   @db.Text
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userId])
}

model Review {
  id        String   @id @default(uuid())
  content   String   @db.Text
  userId    String
  animeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@index([animeId])
  @@index([userId])
}
